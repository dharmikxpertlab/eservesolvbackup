{"version":3,"sources":["../../../projects/ngx-otp-input/src/lib/component/ngx-otp-input.component.ts","../../../projects/ngx-otp-input/src/lib/pattern.directive.ts","../../../projects/ngx-otp-input/src/lib/ngx-otp-input.module.ts"],"names":["NgxOtpInputComponent","this","ngxOtpArray","FormArray","focusedInputHasValue","lastFocus","defaultAriaLabel","ariaLabels","classList","disable","otpChange","EventEmitter","fill","Object","defineProperty","prototype","controls","status","ngxOtpStatus","setInputClasses","onPaste","event","preventDefault","setValue","clipboardData","getData","ngOnInit","setUpOtpForm","setUpAriaLabels","otpFormChangeListener","handleDisable","undefined","config","autoblur","ngAfterViewInit","numericInputMode","pattern","otpInputElements","map","element","nativeElement","setAttribute","autofocus","setFocus","ngOnChanges","changes","hasOwnProperty","ngOnDestroy","ngxOtpArray$","unsubscribe","getAriaLabelByIndex","index","handleFocus","getInputElementByIndex","select","handleKeyup","value","test","getFormControlByIndex","stepForward","stepBackward","handleKeydown","handleLeftArrow","handleRightArrow","otpLength","clear","reset","i","push","FormControl","Validators","required","Array","isArray","inputEntry","isFilled","isInputFilled","_a","inputFilled","isDisabled","_b","inputDisabled","inputSuccess","inputError","input","_this","lastIndex_1","split","slice","character","setFocusAfterValueSet","enable","valid","removeFocus","lastIndex","focus","blur","toArray","valueChanges","subscribe","values","emit","join","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","Output","ViewChildren","HostListener","PatternDirective","allowedKeys","onKeyDown","e","includes","key","ctrlKey","metaKey","Directive","NgModule","declarations","imports","ReactiveFormsModule","FormsModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChildren,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport { NgxOtpInputConfig, NgxOtpStatus } from './ngx-otp-input.model';\nimport { FormArray, FormControl, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-otp-input',\n  templateUrl: './ngx-otp-input.component.html',\n  styleUrls: ['./ngx-otp-input.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxOtpInputComponent\n  implements OnInit, AfterViewInit, OnChanges, OnDestroy {\n  private ngxOtpArray = new FormArray([]);\n  private ngxOtpArray$: Subscription;\n  private focusedInputHasValue = false;\n  private lastFocus = 0;\n  private defaultAriaLabel = 'One time password input';\n  private ngxOtpStatus: NgxOtpStatus;\n\n  ariaLabels = [];\n  classList = [];\n  pattern: RegExp;\n\n  get ngxOtpArrayControls(): FormControl[] {\n    return this.ngxOtpArray.controls as FormControl[];\n  }\n\n  @Input() config: NgxOtpInputConfig;\n  @Input() disable = false;\n\n  @Input() set status(status: NgxOtpStatus) {\n    this.ngxOtpStatus = status;\n    this.setInputClasses();\n  }\n\n  @Output() otpChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() fill: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChildren('otpInputElement') otpInputElements: QueryList<ElementRef>;\n\n  @HostListener('paste', ['$event']) onPaste(event: ClipboardEvent): void {\n    event.preventDefault();\n    this.setValue(event.clipboardData.getData('text'));\n  }\n\n  ngOnInit(): void {\n    this.setUpOtpForm();\n    this.setUpAriaLabels();\n    this.setInputClasses();\n    this.otpFormChangeListener();\n    this.handleDisable(this.disable);\n\n    if (this.config.autoblur === undefined) {\n      this.config.autoblur = true;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    if (this.config.numericInputMode || !this.config.pattern) {\n      this.otpInputElements.map((element) => {\n        element.nativeElement.setAttribute('inputmode', 'numeric');\n        element.nativeElement.setAttribute('pattern', '[0-9]*');\n      });\n    }\n\n    if (this.config.autofocus) {\n      this.setFocus(0);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('disable')) {\n      this.handleDisable(this.disable);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.ngxOtpArray$.unsubscribe();\n  }\n\n  getAriaLabelByIndex(index: number): string {\n    return this.ariaLabels[index]\n      ? this.ariaLabels[index]\n      : this.defaultAriaLabel;\n  }\n\n  handleFocus(index: number): void {\n    this.lastFocus = index;\n    this.getInputElementByIndex(index).select();\n  }\n\n  handleKeyup(value: string, index: number): void {\n    if (this.pattern.test(value) && value !== 'Backspace') {\n      this.getFormControlByIndex(index).setValue(value); // prevent fast type errors\n      this.stepForward(index);\n    } else if (value === 'Backspace') {\n      this.stepBackward(index);\n    }\n\n    this.setInputClasses();\n  }\n\n  handleKeydown(index: number): void {\n    this.focusedInputHasValue = !!this.getFormControlByIndex(index).value;\n  }\n\n  handleLeftArrow(index: number): void {\n    if (index > 0) {\n      this.setFocus(index - 1);\n    }\n  }\n\n  handleRightArrow(index: number): void {\n    if (index < this.config.otpLength - 1) {\n      this.setFocus(index + 1);\n    }\n  }\n\n  clear(): void {\n    this.ngxOtpArray.reset();\n    this.setInputClasses();\n  }\n\n  private setUpOtpForm(): void {\n    for (let i = 0; i < this.config.otpLength; i++) {\n      this.ngxOtpArray.push(new FormControl(null, [Validators.required]));\n    }\n\n    this.pattern = this.config.pattern || /^\\d+$/;\n  }\n\n  private setUpAriaLabels(): void {\n    if (this.config.ariaLabels) {\n      Array.isArray(this.config.ariaLabels)\n        ? (this.ariaLabels = this.config.ariaLabels)\n        : (this.ariaLabels = new Array(this.config.otpLength).fill(\n            this.config.ariaLabels\n          ));\n    }\n  }\n\n  private setInputClasses(): void {\n    const inputEntry = [];\n    const classList = this.config.classList;\n\n    for (let i = 0; i < this.config.otpLength; i++) {\n      const isFilled = this.isInputFilled(i)\n        ? this.config.classList?.inputFilled || ''\n        : '';\n\n      const isDisabled = this.disable\n        ? this.config.classList?.inputDisabled || 'ngx-otp-input-disabled'\n        : '';\n\n      let status: string | string[] = '';\n\n      if (this.ngxOtpStatus === 'success') {\n        status = this.config.classList.inputSuccess;\n      } else if (this.ngxOtpStatus === 'error') {\n        status = this.config.classList.inputError;\n      }\n\n      inputEntry[i] = [classList?.input || '', isFilled, isDisabled, status];\n    }\n\n    this.classList = inputEntry;\n  }\n\n  private setValue(value: string): void {\n    if (this.pattern.test(value)) {\n      let lastIndex = 0;\n      value\n        .split('')\n        .slice(0, this.config.otpLength)\n        .map((character: string, index: number) => {\n          this.getFormControlByIndex(index).setValue(character);\n          lastIndex = index;\n        });\n\n      this.setInputClasses();\n      this.setFocusAfterValueSet(lastIndex);\n    }\n  }\n\n  private handleDisable(disable: boolean): void {\n    disable ? this.ngxOtpArray?.disable() : this.ngxOtpArray?.enable();\n    this.setInputClasses();\n  }\n\n  private stepForward(index: number): void {\n    if (this.ngxOtpArray.valid && this.config.autoblur) {\n      this.removeFocus(index);\n    } else if (index < this.config.otpLength - 1) {\n      this.setFocus(index + 1);\n    }\n  }\n\n  private stepBackward(index: number): void {\n    if (!this.focusedInputHasValue && index > 0) {\n      this.setFocus(index - 1);\n    }\n  }\n\n  private setFocusAfterValueSet(lastIndex: number): void {\n    if (lastIndex < this.config.otpLength - 1) {\n      this.setFocus(lastIndex + 1);\n    } else {\n      this.removeFocus(this.lastFocus);\n    }\n  }\n\n  private setFocus(index: number): void {\n    this.getInputElementByIndex(index).focus();\n  }\n\n  private removeFocus(index: number): void {\n    this.getInputElementByIndex(index).blur();\n  }\n\n  private isInputFilled(index: number): boolean {\n    return this.getFormControlByIndex(index)?.valid;\n  }\n\n  private getInputElementByIndex(index: number): any {\n    return this.otpInputElements.toArray()[index].nativeElement;\n  }\n\n  private getFormControlByIndex(index: number): FormControl {\n    return this.ngxOtpArray.controls[index] as FormControl;\n  }\n\n  private otpFormChangeListener(): void {\n    this.ngxOtpArray$ = this.ngxOtpArray.valueChanges.subscribe((values) => {\n      this.otpChange.emit(values);\n\n      if (this.ngxOtpArray.valid) {\n        this.fill.emit(values.join(''));\n      }\n    });\n  }\n}\n","import { Directive, HostListener, Input } from '@angular/core';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxOtpPattern]',\n})\nexport class PatternDirective {\n  // allowed keys apart from numeric characters\n  private allowedKeys = [\n    'Backspace',\n    'ArrowLeft',\n    'ArrowRight',\n    'Escape',\n    'Tab',\n  ];\n\n  @Input('ngxOtpPattern') pattern: RegExp;\n\n  @HostListener('keydown', ['$event']) onKeyDown(e: KeyboardEvent): void {\n    if (\n      this.allowedKeys.includes(e.key) ||\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\n      (e.key === 'a' && e.metaKey === true) || // Cmd+A (Mac)\n      (e.key === 'c' && e.metaKey === true) || // Cmd+C (Mac)\n      (e.key === 'v' && e.metaKey === true) || // Cmd+V (Mac)\n      (e.key === 'x' && e.metaKey === true) // Cmd+X (Mac)\n    ) {\n      return; // let it happen, don't do anything\n    } else if (!this.pattern.test(e.key)) {\n      e.preventDefault();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxOtpInputComponent } from './component/ngx-otp-input.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { PatternDirective } from './pattern.directive';\n\n@NgModule({\n  declarations: [NgxOtpInputComponent, PatternDirective],\n  imports: [ReactiveFormsModule, FormsModule, CommonModule],\n  exports: [NgxOtpInputComponent],\n})\nexport class NgxOtpInputModule {}\n"]}