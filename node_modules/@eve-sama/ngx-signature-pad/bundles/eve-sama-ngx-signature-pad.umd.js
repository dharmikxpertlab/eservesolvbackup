(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('signature_pad'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@eve-sama/ngx-signature-pad', ['exports', '@angular/core', 'signature_pad', '@angular/cdk/overlay', '@angular/cdk/portal', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['eve-sama'] = global['eve-sama'] || {}, global['eve-sama']['ngx-signature-pad'] = {}), global.ng.core, global.signature_pad, global.ng.cdk.overlay, global.ng.cdk.portal, global.ng.common));
}(this, (function (exports, core, SignaturePad, overlay, portal, common) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var SignaturePad__default = /*#__PURE__*/_interopDefaultLegacy(SignaturePad);

    var NgxSignaturePadComponent = /** @class */ (function () {
        function NgxSignaturePadComponent(renderer2, overlay, viewContainerRef) {
            this.renderer2 = renderer2;
            this.overlay = overlay;
            this.viewContainerRef = viewContainerRef;
            // #endregion
            this.signDataHistory = [];
            this._isEmpty = true;
            this.isFullScreen = false;
            this.options = {};
            this.beginSign = new core.EventEmitter();
            this.endSign = new core.EventEmitter();
        }
        Object.defineProperty(NgxSignaturePadComponent.prototype, "activePad", {
            get: function () {
                return this.isFullScreen ? this.bigPad : this.smallPad;
            },
            enumerable: false,
            configurable: true
        });
        NgxSignaturePadComponent.prototype.fullScreen = function () {
            this.portal = new portal.TemplatePortal(this.fullScreenTpl, this.viewContainerRef);
            this.overlayRef = this.overlay.create({
                positionStrategy: this.overlay.position().global(),
                scrollStrategy: this.overlay.scrollStrategies.block(),
                height: '100%',
                width: '100%'
            });
            this.overlayRef.attach(this.portal);
            this.initBigPad();
            // #region Copy miniScreen's content to fullScreen
            var _a = this.options, miniScreenWidth = _a.width, miniScreenHeight = _a.height;
            var ctx = this.bigCanvas.getContext('2d');
            ctx.save();
            ctx.translate(this.fullScreenWidth, 0);
            ctx.rotate((90 * Math.PI) / 180);
            ctx.drawImage(this.smallCanvas, 0, 0, miniScreenWidth, miniScreenHeight, 0, 0, this.fullScreenHeight, this.fullScreenWidth);
            ctx.restore();
            // #endregion
            this.isFullScreen = true;
        };
        NgxSignaturePadComponent.prototype.miniScreen = function () {
            this.smallPad.clear();
            // #region Copy fullScreen's content to miniScreen
            var _a = this.options, miniScreenWidth = _a.width, miniScreenHeight = _a.height;
            var widthScale = miniScreenWidth / this.fullScreenHeight;
            var heightScale = miniScreenHeight / this.fullScreenWidth;
            var ctx = this.smallCanvas.getContext('2d');
            ctx.save();
            ctx.translate(0, miniScreenHeight);
            ctx.rotate((-90 * Math.PI) / 180);
            ctx.drawImage(this.bigCanvas, 0, 0, this.fullScreenWidth, this.fullScreenHeight, 0, 0, this.fullScreenWidth * widthScale, this.fullScreenHeight * heightScale);
            ctx.restore();
            // #endregion
            this.overlayRef.dispose();
            this.bigCanvas = null;
            this.bigPad = null;
            this.isFullScreen = false;
        };
        /** Returns signature image as an array of point groups */
        NgxSignaturePadComponent.prototype.toData = function () {
            return this.activePad.toData();
        };
        /** Draws signature image from an array of point groups */
        NgxSignaturePadComponent.prototype.fromData = function (pointGroups) {
            this.activePad.fromData(pointGroups);
        };
        NgxSignaturePadComponent.prototype.toDataURL = function (type) {
            switch (type) {
                case 'image/jpeg':
                    return this.activePad.toDataURL('image/jpeg');
                case 'image/svg+xml':
                    return this.activePad.toDataURL('image/svg+xml');
                default:
                    return this.activePad.toDataURL();
            }
        };
        NgxSignaturePadComponent.prototype.revert = function () {
            this.signDataHistory.pop();
            this.fromData(this.signDataHistory);
            if (this.signDataHistory.length === 0) {
                this.setEmpty();
            }
        };
        // Clears the canvas
        NgxSignaturePadComponent.prototype.clear = function () {
            this.setEmpty();
            this.signDataHistory = [];
            this.activePad.clear();
        };
        /** Return true if canvas is empty, otherwise return false */
        NgxSignaturePadComponent.prototype.isEmpty = function () {
            return this._isEmpty;
        };
        /** Set canvas's state as dirty */
        NgxSignaturePadComponent.prototype.setDirty = function () {
            this._isEmpty = false;
        };
        /** Set canvas's state as empty */
        NgxSignaturePadComponent.prototype.setEmpty = function () {
            this._isEmpty = true;
        };
        NgxSignaturePadComponent.prototype.getContext = function () {
            return this.isFullScreen ? this.bigCanvas.getContext('2d') : this.smallCanvas.getContext('2d');
        };
        NgxSignaturePadComponent.prototype.initBigPad = function () {
            this.bigCanvas = document.querySelector('#nsp-big');
            var fullScreenOptions = JSON.parse(JSON.stringify(this.options));
            // Calculate the fullScreen pad's size
            this.fullScreenWidth = document.documentElement.clientWidth;
            var _a = this.options, miniScreenWidth = _a.width, miniScreenHeight = _a.height;
            this.fullScreenHeight = (this.fullScreenWidth * miniScreenWidth) / miniScreenHeight;
            // Calculate section size
            var viewHeight = document.documentElement.clientHeight;
            var space = viewHeight - this.fullScreenHeight;
            this.sectionHeight = space / 2;
            // Init pad
            fullScreenOptions.width = this.fullScreenWidth;
            fullScreenOptions.height = this.fullScreenHeight;
            var css = fullScreenOptions.css;
            this.bigCanvas.width = this.fullScreenWidth;
            this.bigCanvas.height = this.fullScreenHeight;
            for (var key in css) {
                if (Object.prototype.hasOwnProperty.call(css, key)) {
                    var value = css[key];
                    this.renderer2.setStyle(this.bigCanvas, key, value);
                }
            }
            this.bigPad = new SignaturePad__default['default'](this.bigCanvas, fullScreenOptions);
            this.bigPad.onBegin = this._onBegin.bind(this);
            this.bigPad.onEnd = this._onEnd.bind(this);
        };
        NgxSignaturePadComponent.prototype.initSmallPad = function () {
            this.smallCanvas = document.querySelector('#nsp-small');
            var _a = this.options, width = _a.width, height = _a.height, css = _a.css;
            this.options.width = width ? width : 300;
            this.options.height = height ? height : 150;
            this.smallCanvas.width = this.options.width;
            this.smallCanvas.height = this.options.height;
            for (var key in css) {
                if (Object.prototype.hasOwnProperty.call(css, key)) {
                    var value = css[key];
                    this.renderer2.setStyle(this.smallCanvas, key, value);
                }
            }
            this.smallPad = new SignaturePad__default['default'](this.smallCanvas, this.options);
            this.smallPad.onBegin = this._onBegin.bind(this);
            this.smallPad.onEnd = this._onEnd.bind(this);
        };
        NgxSignaturePadComponent.prototype._onBegin = function () {
            this.setDirty(); // When user draws, set state as dirty
            this.beginSign.emit();
        };
        NgxSignaturePadComponent.prototype._onEnd = function () {
            this.signDataHistory = this.toData();
            this.endSign.emit();
        };
        NgxSignaturePadComponent.prototype.setPadAttribute = function (key, value) {
            if (this.bigPad) {
                this.bigPad[key] = value;
            }
            this.smallPad[key] = value;
        };
        NgxSignaturePadComponent.prototype.ngOnInit = function () {
            this.initSmallPad();
        };
        NgxSignaturePadComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            if (changes.options.firstChange) {
                return;
            }
            var _a = changes.options.currentValue, dotSize = _a.dotSize, minWidth = _a.minWidth, maxWidth = _a.maxWidth, throttle = _a.throttle, minDistance = _a.minDistance, backgroundColor = _a.backgroundColor, penColor = _a.penColor, velocityFilterWeight = _a.velocityFilterWeight, width = _a.width, height = _a.height, css = _a.css;
            if (dotSize) {
                this.setPadAttribute('dotSize', dotSize);
            }
            if (minWidth) {
                this.setPadAttribute('minWidth', minWidth);
            }
            if (maxWidth) {
                this.setPadAttribute('maxWidth', maxWidth);
            }
            if (throttle) {
                this.setPadAttribute('throttle', throttle);
            }
            if (minDistance) {
                this.setPadAttribute('minDistance', minDistance);
            }
            if (backgroundColor) {
                this.setPadAttribute('backgroundColor', backgroundColor);
            }
            if (penColor) {
                this.setPadAttribute('penColor', penColor);
            }
            if (velocityFilterWeight) {
                this.setPadAttribute('velocityFilterWeight', velocityFilterWeight);
            }
            if (width || height) {
                var _b = changes.options.previousValue, previousWidth_1 = _b.width, previousHeight_1 = _b.height;
                var data = this.smallPad.toDataURL();
                var image_1 = new Image();
                image_1.src = data;
                image_1.onload = function () {
                    _this.initSmallPad();
                    var ctx = _this.smallCanvas.getContext('2d');
                    ctx.drawImage(image_1, 0, 0, previousWidth_1, previousHeight_1, 0, 0, width, height);
                };
            }
            if (css) {
                if (this.bigCanvas) {
                    for (var key in css) {
                        if (Object.prototype.hasOwnProperty.call(css, key)) {
                            var value = css[key];
                            this.renderer2.setStyle(this.bigCanvas, key, value);
                        }
                    }
                }
                if (this.smallCanvas) {
                    for (var key in css) {
                        if (Object.prototype.hasOwnProperty.call(css, key)) {
                            var value = css[key];
                            this.renderer2.setStyle(this.smallCanvas, key, value);
                        }
                    }
                }
            }
        };
        return NgxSignaturePadComponent;
    }());
    NgxSignaturePadComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ngx-signature-pad',
                    template: "<canvas id=\"nsp-small\"></canvas>\n\n<ng-template #fullScreenTpl>\n  <div class=\"nsp-container\">\n    <div class=\"section left\" style=\"width: 100%;\" [ngStyle]=\"{'height': sectionHeight + 'px'}\"></div>\n    <canvas id=\"nsp-big\"></canvas>\n    <div class=\"section right\" style=\"width: 100%;\" [ngStyle]=\"{'height': sectionHeight + 'px'}\"></div>\n    <ng-content></ng-content>\n  </div>\n</ng-template>",
                    styles: [".nsp-container{display:flex;flex-direction:column;position:fixed;left:0;top:0;width:100%;height:100vh;background:#fff}.nsp-container .section{flex:1}.nsp-container .section.left{border-bottom:2px dashed #dedee5}.nsp-container .section.right{border-top:2px dashed #dedee5}"]
                },] }
    ];
    NgxSignaturePadComponent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: overlay.Overlay },
        { type: core.ViewContainerRef }
    ]; };
    NgxSignaturePadComponent.propDecorators = {
        options: [{ type: core.Input }],
        beginSign: [{ type: core.Output }],
        endSign: [{ type: core.Output }],
        fullScreenTpl: [{ type: core.ViewChild, args: ['fullScreenTpl',] }]
    };

    var NgxSignaturePadModule = /** @class */ (function () {
        function NgxSignaturePadModule() {
        }
        return NgxSignaturePadModule;
    }());
    NgxSignaturePadModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, overlay.OverlayModule],
                    declarations: [NgxSignaturePadComponent],
                    exports: [NgxSignaturePadComponent]
                },] }
    ];

    /*
     * Public API Surface of ngx-signature-pad
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxSignaturePadComponent = NgxSignaturePadComponent;
    exports.NgxSignaturePadModule = NgxSignaturePadModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=eve-sama-ngx-signature-pad.umd.js.map
