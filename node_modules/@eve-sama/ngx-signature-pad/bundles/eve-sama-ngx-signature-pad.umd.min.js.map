{"version":3,"sources":["../../src/lib/ngx-signature-pad.component.ts","../../src/lib/ngx-signature-pad.module.ts"],"names":["NgxSignaturePadComponent","renderer2","overlay","viewContainerRef","this","signDataHistory","_isEmpty","isFullScreen","options","beginSign","EventEmitter","endSign","Object","defineProperty","prototype","bigPad","smallPad","fullScreen","portal","TemplatePortal","fullScreenTpl","overlayRef","create","positionStrategy","position","global","scrollStrategy","scrollStrategies","block","height","width","attach","initBigPad","_a","miniScreenWidth","miniScreenHeight","ctx","bigCanvas","getContext","save","translate","fullScreenWidth","rotate","Math","PI","drawImage","smallCanvas","fullScreenHeight","restore","miniScreen","clear","widthScale","heightScale","dispose","toData","activePad","fromData","pointGroups","toDataURL","type","revert","pop","length","setEmpty","isEmpty","setDirty","document","querySelector","fullScreenOptions","JSON","parse","stringify","documentElement","clientWidth","space","clientHeight","sectionHeight","css","key","hasOwnProperty","call","value","setStyle","SignaturePad","onBegin","_onBegin","bind","onEnd","_onEnd","initSmallPad","emit","setPadAttribute","ngOnInit","ngOnChanges","changes","_this","firstChange","currentValue","dotSize","minWidth","maxWidth","throttle","minDistance","backgroundColor","penColor","velocityFilterWeight","_b","previousValue","previousWidth_1","previousHeight_1","data","image_1","Image","src","onload","Component","args","selector","template","Renderer2","Overlay","ViewContainerRef","Input","Output","ViewChild","NgModule","imports","CommonModule","OverlayModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  Renderer2,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef\r\n} from '@angular/core';\r\nimport SignaturePad, { IPointGroup } from 'signature_pad';\r\nimport { NgxSignatureOptions } from './types/ngx-signature-pad';\r\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\n\r\n@Component({\r\n  selector: 'ngx-signature-pad',\r\n  templateUrl: './ngx-signature-pad.component.html',\r\n  styleUrls: ['./ngx-signature-pad.component.scss']\r\n})\r\nexport class NgxSignaturePadComponent implements OnInit, OnChanges {\r\n  // #region The object of dependency 'siganture_pad'\r\n  private smallPad: SignaturePad;\r\n  private bigPad: SignaturePad;\r\n  // #endregion\r\n  // #region The object of canvas\r\n  private smallCanvas: HTMLCanvasElement;\r\n  private bigCanvas: HTMLCanvasElement;\r\n  // #endregion\r\n  // #region CDK\r\n  private overlayRef: OverlayRef;\r\n  private portal: TemplatePortal;\r\n  // #endregion\r\n  private signDataHistory: IPointGroup[] = [];\r\n  private fullScreenWidth: number;\r\n  private fullScreenHeight: number;\r\n  private _isEmpty = true;\r\n  private isFullScreen = false;\r\n\r\n  public sectionHeight: number;\r\n\r\n  private get activePad(): SignaturePad {\r\n    return this.isFullScreen ? this.bigPad : this.smallPad;\r\n  }\r\n\r\n  @Input() options: NgxSignatureOptions = {};\r\n\r\n  @Output() public beginSign = new EventEmitter<void>();\r\n  @Output() public endSign = new EventEmitter<void>();\r\n\r\n  @ViewChild('fullScreenTpl') fullScreenTpl: TemplateRef<void>;\r\n\r\n  public fullScreen(): void {\r\n    this.portal = new TemplatePortal(this.fullScreenTpl, this.viewContainerRef);\r\n    this.overlayRef = this.overlay.create({\r\n      positionStrategy: this.overlay.position().global(),\r\n      scrollStrategy: this.overlay.scrollStrategies.block(),\r\n      height: '100%',\r\n      width: '100%'\r\n    });\r\n    this.overlayRef.attach(this.portal);\r\n    this.initBigPad();\r\n    // #region Copy miniScreen's content to fullScreen\r\n    const { width: miniScreenWidth, height: miniScreenHeight } = this.options;\r\n    const ctx = this.bigCanvas.getContext('2d');\r\n    ctx.save();\r\n    ctx.translate(this.fullScreenWidth, 0);\r\n    ctx.rotate((90 * Math.PI) / 180);\r\n    ctx.drawImage(\r\n      this.smallCanvas,\r\n      0,\r\n      0,\r\n      miniScreenWidth,\r\n      miniScreenHeight,\r\n      0,\r\n      0,\r\n      this.fullScreenHeight,\r\n      this.fullScreenWidth\r\n    );\r\n    ctx.restore();\r\n    // #endregion\r\n    this.isFullScreen = true;\r\n  }\r\n\r\n  public miniScreen(): void {\r\n    this.smallPad.clear();\r\n    // #region Copy fullScreen's content to miniScreen\r\n    const { width: miniScreenWidth, height: miniScreenHeight } = this.options;\r\n    const widthScale = miniScreenWidth / this.fullScreenHeight;\r\n    const heightScale = miniScreenHeight / this.fullScreenWidth;\r\n    const ctx = this.smallCanvas.getContext('2d');\r\n    ctx.save();\r\n    ctx.translate(0, miniScreenHeight);\r\n    ctx.rotate((-90 * Math.PI) / 180);\r\n    ctx.drawImage(\r\n      this.bigCanvas,\r\n      0,\r\n      0,\r\n      this.fullScreenWidth,\r\n      this.fullScreenHeight,\r\n      0,\r\n      0,\r\n      this.fullScreenWidth * widthScale,\r\n      this.fullScreenHeight * heightScale\r\n    );\r\n    ctx.restore();\r\n    // #endregion\r\n    this.overlayRef.dispose();\r\n    this.bigCanvas = null;\r\n    this.bigPad = null;\r\n    this.isFullScreen = false;\r\n  }\r\n\r\n  /** Returns signature image as an array of point groups */\r\n  public toData(): IPointGroup[] {\r\n    return this.activePad.toData();\r\n  }\r\n\r\n  /** Draws signature image from an array of point groups */\r\n  public fromData(pointGroups: IPointGroup[]): void {\r\n    this.activePad.fromData(pointGroups);\r\n  }\r\n\r\n  public toDataURL(type?: 'image/jpeg' | 'image/svg+xml'): string {\r\n    switch (type) {\r\n      case 'image/jpeg':\r\n        return this.activePad.toDataURL('image/jpeg');\r\n      case 'image/svg+xml':\r\n        return this.activePad.toDataURL('image/svg+xml');\r\n      default:\r\n        return this.activePad.toDataURL();\r\n    }\r\n  }\r\n\r\n  public revert(): void {\r\n    this.signDataHistory.pop();\r\n    this.fromData(this.signDataHistory);\r\n    if (this.signDataHistory.length === 0) {\r\n      this.setEmpty();\r\n    }\r\n  }\r\n\r\n  // Clears the canvas\r\n  public clear(): void {\r\n    this.setEmpty();\r\n    this.signDataHistory = [];\r\n    this.activePad.clear();\r\n  }\r\n\r\n  /** Return true if canvas is empty, otherwise return false */\r\n  public isEmpty(): boolean {\r\n    return this._isEmpty;\r\n  }\r\n\r\n  /** Set canvas's state as dirty */\r\n  public setDirty(): void {\r\n    this._isEmpty = false;\r\n  }\r\n\r\n  /** Set canvas's state as empty */\r\n  public setEmpty(): void {\r\n    this._isEmpty = true;\r\n  }\r\n\r\n  public getContext(): CanvasRenderingContext2D {\r\n    return this.isFullScreen ? this.bigCanvas.getContext('2d') : this.smallCanvas.getContext('2d');\r\n  }\r\n\r\n  private initBigPad(): void {\r\n    this.bigCanvas = document.querySelector('#nsp-big');\r\n    const fullScreenOptions = JSON.parse(JSON.stringify(this.options));\r\n    // Calculate the fullScreen pad's size\r\n    this.fullScreenWidth = document.documentElement.clientWidth;\r\n    const { width: miniScreenWidth, height: miniScreenHeight } = this.options;\r\n    this.fullScreenHeight = (this.fullScreenWidth * miniScreenWidth) / miniScreenHeight;\r\n    // Calculate section size\r\n    const viewHeight = document.documentElement.clientHeight;\r\n    const space = viewHeight - this.fullScreenHeight;\r\n    this.sectionHeight = space / 2;\r\n    // Init pad\r\n    fullScreenOptions.width = this.fullScreenWidth;\r\n    fullScreenOptions.height = this.fullScreenHeight;\r\n    const { css } = fullScreenOptions;\r\n    this.bigCanvas.width = this.fullScreenWidth;\r\n    this.bigCanvas.height = this.fullScreenHeight;\r\n    for (const key in css) {\r\n      if (Object.prototype.hasOwnProperty.call(css, key)) {\r\n        const value = css[key];\r\n        this.renderer2.setStyle(this.bigCanvas, key, value);\r\n      }\r\n    }\r\n    this.bigPad = new SignaturePad(this.bigCanvas, fullScreenOptions);\r\n    this.bigPad.onBegin = this._onBegin.bind(this);\r\n    this.bigPad.onEnd = this._onEnd.bind(this);\r\n  }\r\n\r\n  private initSmallPad(): void {\r\n    this.smallCanvas = document.querySelector('#nsp-small');\r\n    const { width, height, css } = this.options;\r\n    this.options.width = width ? width : 300;\r\n    this.options.height = height ? height : 150;\r\n    this.smallCanvas.width = this.options.width;\r\n    this.smallCanvas.height = this.options.height;\r\n    for (const key in css) {\r\n      if (Object.prototype.hasOwnProperty.call(css, key)) {\r\n        const value = css[key];\r\n        this.renderer2.setStyle(this.smallCanvas, key, value);\r\n      }\r\n    }\r\n    this.smallPad = new SignaturePad(this.smallCanvas, this.options);\r\n    this.smallPad.onBegin = this._onBegin.bind(this);\r\n    this.smallPad.onEnd = this._onEnd.bind(this);\r\n  }\r\n\r\n  private _onBegin(): void {\r\n    this.setDirty(); // When user draws, set state as dirty\r\n    this.beginSign.emit();\r\n  }\r\n\r\n  private _onEnd(): void {\r\n    this.signDataHistory = this.toData();\r\n    this.endSign.emit();\r\n  }\r\n\r\n  private setPadAttribute(key: string, value: any): void {\r\n    if (this.bigPad) {\r\n      this.bigPad[key] = value;\r\n    }\r\n    this.smallPad[key] = value;\r\n  }\r\n\r\n  constructor(private renderer2: Renderer2, private overlay: Overlay, private viewContainerRef: ViewContainerRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initSmallPad();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.options.firstChange) {\r\n      return;\r\n    }\r\n    const {\r\n      dotSize,\r\n      minWidth,\r\n      maxWidth,\r\n      throttle,\r\n      minDistance,\r\n      backgroundColor,\r\n      penColor,\r\n      velocityFilterWeight,\r\n      width,\r\n      height,\r\n      css\r\n    } = changes.options.currentValue;\r\n    if (dotSize) {\r\n      this.setPadAttribute('dotSize', dotSize);\r\n    }\r\n    if (minWidth) {\r\n      this.setPadAttribute('minWidth', minWidth);\r\n    }\r\n    if (maxWidth) {\r\n      this.setPadAttribute('maxWidth', maxWidth);\r\n    }\r\n    if (throttle) {\r\n      this.setPadAttribute('throttle', throttle);\r\n    }\r\n    if (minDistance) {\r\n      this.setPadAttribute('minDistance', minDistance);\r\n    }\r\n    if (backgroundColor) {\r\n      this.setPadAttribute('backgroundColor', backgroundColor);\r\n    }\r\n    if (penColor) {\r\n      this.setPadAttribute('penColor', penColor);\r\n    }\r\n    if (velocityFilterWeight) {\r\n      this.setPadAttribute('velocityFilterWeight', velocityFilterWeight);\r\n    }\r\n    if (width || height) {\r\n      const { width: previousWidth, height: previousHeight } = changes.options.previousValue;\r\n      const data = this.smallPad.toDataURL();\r\n      const image = new Image();\r\n      image.src = data;\r\n      image.onload = () => {\r\n        this.initSmallPad();\r\n        const ctx = this.smallCanvas.getContext('2d');\r\n        ctx.drawImage(image, 0, 0, previousWidth, previousHeight, 0, 0, width, height);\r\n      };\r\n    }\r\n    if (css) {\r\n      if (this.bigCanvas) {\r\n        for (const key in css) {\r\n          if (Object.prototype.hasOwnProperty.call(css, key)) {\r\n            const value = css[key];\r\n            this.renderer2.setStyle(this.bigCanvas, key, value);\r\n          }\r\n        }\r\n      }\r\n      if (this.smallCanvas) {\r\n        for (const key in css) {\r\n          if (Object.prototype.hasOwnProperty.call(css, key)) {\r\n            const value = css[key];\r\n            this.renderer2.setStyle(this.smallCanvas, key, value);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxSignaturePadComponent } from './ngx-signature-pad.component';\n\n@NgModule({\n  imports: [CommonModule, OverlayModule],\n  declarations: [NgxSignaturePadComponent],\n  exports: [NgxSignaturePadComponent]\n})\nexport class NgxSignaturePadModule {}\n"]}