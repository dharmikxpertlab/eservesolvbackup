{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{U6Qn:function(e,t,i){\"use strict\";i.r(t),i.d(t,\"DeviceWeb\",function(){return o});var n=i(\"FUe0\");class o extends n.c{async getId(){return{uuid:this.getUid()}}async getInfo(){if(\"undefined\"==typeof navigator||!navigator.userAgent)throw this.unavailable(\"Device API not available in this browser\");const e=navigator.userAgent,t=this.parseUa(e);return{model:t.model,platform:\"web\",operatingSystem:t.operatingSystem,osVersion:t.osVersion,manufacturer:navigator.vendor,isVirtual:!1,webViewVersion:t.browserVersion}}async getBatteryInfo(){if(\"undefined\"==typeof navigator||!navigator.getBattery)throw this.unavailable(\"Device API not available in this browser\");let e={};try{e=await navigator.getBattery()}catch(t){}return{batteryLevel:e.level,isCharging:e.charging}}async getLanguageCode(){return{value:navigator.language}}parseUa(e){const t={},i=e.indexOf(\"(\")+1;let n=e.indexOf(\") AppleWebKit\");-1!==e.indexOf(\") Gecko\")&&(n=e.indexOf(\") Gecko\"));const o=e.substring(i,n);if(-1!==e.indexOf(\"Android\")){const e=o.replace(\"; wv\",\"\").split(\"; \").pop();e&&(t.model=e.split(\" Build\")[0]),t.osVersion=o.split(\"; \")[1]}else if(t.model=o.split(\"; \")[0],\"undefined\"!=typeof navigator&&navigator.oscpu)t.osVersion=navigator.oscpu;else if(-1!==e.indexOf(\"Windows\"))t.osVersion=o;else{const e=o.split(\"; \").pop();if(e){const i=e.replace(\" like Mac OS X\",\"\").split(\" \");t.osVersion=i[i.length-1].replace(/_/g,\".\")}}t.operatingSystem=/android/i.test(e)?\"android\":/iPad|iPhone|iPod/.test(e)&&!window.MSStream?\"ios\":/Win/.test(e)?\"windows\":/Mac/i.test(e)?\"mac\":\"unknown\";const r=!!window.InstallTrigger,s=!!window.ApplePaySession,a=!!window.chrome,d=/Edg/.test(e),l=/FxiOS/.test(e),c=/CriOS/.test(e),g=/EdgiOS/.test(e);if(s||a&&!d||l||c||g){let i;i=l?\"FxiOS\":c?\"CriOS\":g?\"EdgiOS\":s?\"Version\":\"Chrome\";const n=e.split(\" \");for(const e of n)if(e.includes(i)){const i=e.split(\"/\")[1];t.browserVersion=i}}else if(r||d){const i=e.split(\"\").reverse().join(\"\").split(\"/\")[0].split(\"\").reverse().join(\"\");t.browserVersion=i}return t}getUid(){if(\"undefined\"!=typeof window){let e=window.localStorage.getItem(\"_capuid\");return e||(e=this.uuid4(),window.localStorage.setItem(\"_capuid\",e),e)}return this.uuid4()}uuid4(){return\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g,function(e){const t=16*Math.random()|0;return(\"x\"===e?t:3&t|8).toString(16)})}}}}]);","name":"62.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[62],{\n\n/***/ \"U6Qn\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DeviceWeb\", function() { return DeviceWeb; });\n/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"FUe0\");\n\nclass DeviceWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__[/* WebPlugin */ \"c\"] {\n    async getId() {\n        return {\n            uuid: this.getUid(),\n        };\n    }\n    async getInfo() {\n        if (typeof navigator === 'undefined' || !navigator.userAgent) {\n            throw this.unavailable('Device API not available in this browser');\n        }\n        const ua = navigator.userAgent;\n        const uaFields = this.parseUa(ua);\n        return {\n            model: uaFields.model,\n            platform: 'web',\n            operatingSystem: uaFields.operatingSystem,\n            osVersion: uaFields.osVersion,\n            manufacturer: navigator.vendor,\n            isVirtual: false,\n            webViewVersion: uaFields.browserVersion,\n        };\n    }\n    async getBatteryInfo() {\n        if (typeof navigator === 'undefined' || !navigator.getBattery) {\n            throw this.unavailable('Device API not available in this browser');\n        }\n        let battery = {};\n        try {\n            battery = await navigator.getBattery();\n        }\n        catch (e) {\n            // Let it fail, we don't care\n        }\n        return {\n            batteryLevel: battery.level,\n            isCharging: battery.charging,\n        };\n    }\n    async getLanguageCode() {\n        return {\n            value: navigator.language,\n        };\n    }\n    parseUa(ua) {\n        const uaFields = {};\n        const start = ua.indexOf('(') + 1;\n        let end = ua.indexOf(') AppleWebKit');\n        if (ua.indexOf(') Gecko') !== -1) {\n            end = ua.indexOf(') Gecko');\n        }\n        const fields = ua.substring(start, end);\n        if (ua.indexOf('Android') !== -1) {\n            const tmpFields = fields.replace('; wv', '').split('; ').pop();\n            if (tmpFields) {\n                uaFields.model = tmpFields.split(' Build')[0];\n            }\n            uaFields.osVersion = fields.split('; ')[1];\n        }\n        else {\n            uaFields.model = fields.split('; ')[0];\n            if (typeof navigator !== 'undefined' && navigator.oscpu) {\n                uaFields.osVersion = navigator.oscpu;\n            }\n            else {\n                if (ua.indexOf('Windows') !== -1) {\n                    uaFields.osVersion = fields;\n                }\n                else {\n                    const tmpFields = fields.split('; ').pop();\n                    if (tmpFields) {\n                        const lastParts = tmpFields\n                            .replace(' like Mac OS X', '')\n                            .split(' ');\n                        uaFields.osVersion = lastParts[lastParts.length - 1].replace(/_/g, '.');\n                    }\n                }\n            }\n        }\n        if (/android/i.test(ua)) {\n            uaFields.operatingSystem = 'android';\n        }\n        else if (/iPad|iPhone|iPod/.test(ua) && !window.MSStream) {\n            uaFields.operatingSystem = 'ios';\n        }\n        else if (/Win/.test(ua)) {\n            uaFields.operatingSystem = 'windows';\n        }\n        else if (/Mac/i.test(ua)) {\n            uaFields.operatingSystem = 'mac';\n        }\n        else {\n            uaFields.operatingSystem = 'unknown';\n        }\n        // Check for browsers based on non-standard javascript apis, only not user agent\n        const isFirefox = !!window.InstallTrigger;\n        const isSafari = !!window.ApplePaySession;\n        const isChrome = !!window.chrome;\n        const isEdge = /Edg/.test(ua);\n        const isFirefoxIOS = /FxiOS/.test(ua);\n        const isChromeIOS = /CriOS/.test(ua);\n        const isEdgeIOS = /EdgiOS/.test(ua);\n        // FF and Edge User Agents both end with \"/MAJOR.MINOR\"\n        if (isSafari ||\n            (isChrome && !isEdge) ||\n            isFirefoxIOS ||\n            isChromeIOS ||\n            isEdgeIOS) {\n            // Safari version comes as     \"... Version/MAJOR.MINOR ...\"\n            // Chrome version comes as     \"... Chrome/MAJOR.MINOR ...\"\n            // FirefoxIOS version comes as \"... FxiOS/MAJOR.MINOR ...\"\n            // ChromeIOS version comes as  \"... CriOS/MAJOR.MINOR ...\"\n            let searchWord;\n            if (isFirefoxIOS) {\n                searchWord = 'FxiOS';\n            }\n            else if (isChromeIOS) {\n                searchWord = 'CriOS';\n            }\n            else if (isEdgeIOS) {\n                searchWord = 'EdgiOS';\n            }\n            else if (isSafari) {\n                searchWord = 'Version';\n            }\n            else {\n                searchWord = 'Chrome';\n            }\n            const words = ua.split(' ');\n            for (const word of words) {\n                if (word.includes(searchWord)) {\n                    const version = word.split('/')[1];\n                    uaFields.browserVersion = version;\n                }\n            }\n        }\n        else if (isFirefox || isEdge) {\n            const reverseUA = ua.split('').reverse().join('');\n            const reverseVersion = reverseUA.split('/')[0];\n            const version = reverseVersion.split('').reverse().join('');\n            uaFields.browserVersion = version;\n        }\n        return uaFields;\n    }\n    getUid() {\n        if (typeof window !== 'undefined') {\n            let uid = window.localStorage.getItem('_capuid');\n            if (uid) {\n                return uid;\n            }\n            uid = this.uuid4();\n            window.localStorage.setItem('_capuid', uid);\n            return uid;\n        }\n        return this.uuid4();\n    }\n    uuid4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }\n}\n//# sourceMappingURL=web.js.map\n\n/***/ })\n\n}]);","inputSourceMap":null}